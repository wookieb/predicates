declare var _default: ((predicate: (value: any, ...extraArgs: any[]) => boolean) => (value: any, ...extraArgs: any[]) => boolean) & {
    undefined: (value: any, ...extraArgs: any[]) => boolean;
    int: (value: any, ...extraArgs: any[]) => boolean;
    integer: (value: any, ...extraArgs: any[]) => boolean;
    instanceOf: (value: any, ...extraArgs: any[]) => boolean;
    instance: (value: any, ...extraArgs: any[]) => boolean;
    'in': (value: any, ...extraArgs: any[]) => boolean;
    has: (value: any, ...extraArgs: any[]) => boolean;
    hasProperty: (value: any, ...extraArgs: any[]) => boolean;
    hasOwn: (value: any, ...extraArgs: any[]) => boolean;
    hasOwnProperty: (value: any, ...extraArgs: any[]) => boolean;
    gtEq: (value: any, ...extraArgs: any[]) => boolean;
    greaterEq: (value: any, ...extraArgs: any[]) => boolean;
    greaterOrEqual: (value: any, ...extraArgs: any[]) => boolean;
    greaterThanOrEqual: (value: any, ...extraArgs: any[]) => boolean;
    gt: (value: any, ...extraArgs: any[]) => boolean;
    greater: (value: any, ...extraArgs: any[]) => boolean;
    greaterThan: (value: any, ...extraArgs: any[]) => boolean;
    fn: (value: any, ...extraArgs: any[]) => boolean;
    'function': (value: any, ...extraArgs: any[]) => boolean;
    func: (value: any, ...extraArgs: any[]) => boolean;
    finite: (value: any, ...extraArgs: any[]) => boolean;
    falsy: (value: any) => boolean;
    falsey: (value: any) => boolean;
    false: (value: boolean) => boolean;
    eq: (value: any, ...extraArgs: any[]) => boolean;
    equalTo: (value: any, ...extraArgs: any[]) => boolean;
    equal: (value: any, ...extraArgs: any[]) => boolean;
    empty: (value: any, ...extraArgs: any[]) => boolean;
    endsWith: (value: any, ...extraArgs: any[]) => boolean;
    divByWithRemainder: (value: any, ...extraArgs: any[]) => boolean;
    divisibleByWithRemainder: (value: any, ...extraArgs: any[]) => boolean;
    divisibleWithRemainder: (value: any, ...extraArgs: any[]) => boolean;
    divBy: (value: any, ...extraArgs: any[]) => boolean;
    divisible: (value: any, ...extraArgs: any[]) => boolean;
    divisibleBy: (value: any, ...extraArgs: any[]) => boolean;
    date: (value: any, ...extraArgs: any[]) => boolean;
    defined: (value: any) => boolean;
    bool: (value: any, ...extraArgs: any[]) => boolean;
    boolean: (value: any, ...extraArgs: any[]) => boolean;
    blank: (value: any) => boolean;
    arrOf: (value: any, ...extraArgs: any[]) => boolean;
    arrayOf: (value: any, ...extraArgs: any[]) => boolean;
    arrayLike: (value: any, ...extraArgs: any[]) => boolean;
    arrLike: (value: any, ...extraArgs: any[]) => boolean;
    arr: (value: any, ...extraArgs: any[]) => boolean;
    array: (value: any, ...extraArgs: any[]) => boolean;
};
export default _default;
